{
  "controller": "didroom_first_relying_party",
  "didroom_first_relying_party": {
    "keyring": {
      "bbs": "YDOZdsrg1jjnvLv6IB8y2EAWj5yZ1n3AgGhokknZNfs=",
      "bitcoin": "L1KMRv9CvL4EfJvmpzcpgQxgGvnKw14ss8vnvHUnicEDt3gGnD1S",
      "dilithium": "00Jd3hdidozieiK4HHagB6sgDZURJq47wBjWg6nQTJgl3+Dpi508f7wUz11uRigrt9LDZV/QgDGkGjs04doCxGPZU6N5WeljQu0QL9o0DA/yy5NP4qckqWSfldj8u32RFLNEFMcwISmN2EaFzBhOiYREG6gw40JhSoRwyiBQ40ZyEScxGRgJIDeGkqRFEbhNmSRJyIiBCDQkgZSRIjEBGhKQIhIsCsJwDBGFXABqE4BsQoBpi6Bt0SZNmiZJSbIQCRYuJEMgCDmNWZRECThCoDBi4qRtGJUBVAZxoCgIjERMHIRlCjRoSrBpybJQGDZkUBaOBMVtISGKAUctISZsAEiEIqEQSoQI06YECwMSWzgmmgRkiYBFiAZkiyZRiSCNYjQIC8dRmQAN3IZsnJZtUogIAhlKCQlRXAYugQQQ2UROYKQt47SFUihC4QQuUhRoyIJBy8AhkrZh4hBFWpIAQDRMCAcsEyUoSLBFGUdo1BISkDJiHBWFASNxFIEQ2cIQiCgoAggBVBgBzAZhAZMNIkcCGCUC3DIBGUcgWqKRFDRsnIKM1CINg7SFwsaEFAElHIRpmkQoUTZBAyBSIBOKI8RgkCIgkSgACJSEwKSEYSgwyDiEUUCEGjhCgQJxwwgCExlxmxAwyUhpA4QgQwAS2xIgHBYiSCgulEBBoQgxAJlNGBNpEMGFXARsGMVMmkAQGcWMwxgg5EZBY8AkyKRgwyKOCAeCIIeR1CCS0iQShLIJgzgAxAAhEcRh3EIMEAVxwxJNEbkNEEYN2BYlGSAOWiJNJEJsDCFy4agEioBFALmEiAhKCzItwCIhkBYEQxQik6Io2bRsErQogLCIAqeEmgSCowgImyKBnBgBAxiQCyco2YhoIaNAQ7IFiiIhChaRyCJqybhhpBCBEaFRVIAAEIFAIsmEiCYCJDcymAJyHMMMWThmiBYFBKIB2TAxIghtEUctGkOBIwlEAwkGlJYMQ7BADLFNQbJsHAchiBCEGSYlAbmE0AgOwCIt2oZkCBlMZEBKpCKJm0SG3IhMizBlkDYlFMOQAwQgJAMyyyAKlKRkiAZJUaJAUZiRSgYl0wJEHBduA5VsABUMCYdB0kApwEABmbaAGQSQEBEoWMYNmYIhCSVGARiAGzRGmCQSoxYpkfK+fpkVhvyO/+YGPm9fFhJB6IDn+n99KVXkvMNCXsn0NuVaoIpjxEWJTw6VdDTO9GlZY3J/QMIsXi9VsD35H5l8ErPJN6orgCES9KjO4MACKKWHdYFoIb5kQvqJaYuF9wHVXgJWrldOnwOQA7nbskFkuHD8PjSR5QOpOgEEJRjAmpEYRsjVZQyHoNzkLVsMGRAQcHevfOjYEWCSovd0CyYxkIKwDWKQbcwrYc5dAgiBbrOjiytGdZtwvYj/mKYlc/hegqMgaS/4wAwRGMcLNxcpAWoKiABQvJGVEg0qAdQuTE94GB025qBl4r2EoQp6oV9f6VkqUBoUiipu/vrM0VwqNwpBS0EEzlJbBucpbTXJBLsLYymMeqIIquw+Fw9WpkVtm83pzYszJEeb9HfHxZXmjtUQ1+vWLTTdrwchVtDIIouYeYVt3raW4N/gQb1tkxAq59UK7p5XjI2oYLnj9VZv0QAk3n6jFu5RwMHx7v9r8M4BgQZjdEBVao5fKQSkUrcSzMibwMRNd4uXAyQLCYB//j43fL7XhzOt7FZVcIrLzjgqnXjRHbBK7oWcKeC4Wx1WPYWu0+seqtdWE4fLB2CT4fpeNpOGfwowTzi9duxvp70wK3KJrigk/WsUBDL0Nm2FjGgCty/UzC0ThjMinetnMFsqv7erL7ZSc4hHZAPtgpHhKq1xIdFxSHkY7mb2tv36cT3g7XNxQ668ZoQ8x+spTu7PajtZybdCiz/HOwYzbwP/wKxdiQXis7VAT2nHvsYm7HNbEoo7u0SMlJq2UOTUq81NVGuOzpBL7xps+zMNyPP+GZF3S7BVpKsY8dk+LwsQ+yz+RAcBq6hjXB3lwGgoY6fNa98qCFVyM4eGtjHDgq6LGHtb66WNl1mwmW04q3dhuuw4uZcDLnGj5WACm0FpidTxsoYIG64URmwibpQlzdTE8KtowFcHNLcrxi+/6ASEe0Ptk5bC849dEoMMCLKyrMG83/Tfmogtb09ZktfvRfktwEQvs6/NLmhH70SBno8nKSBRV8mN9aRQ4j1brRTispxZyjq0AqKOh3kWsQXOLTxNGs34X5axO+CvVbidtUU9n4BmlRw59Ik+xc51whA9Y76jVbNFDAxxn81sQbznrlXpCSpRTIuIEYbuql4gpr2WYi6sTKdVIXpM9dRZHvrxvuLjcIoXgJBF+A2M762yS/M558+GhP38iDefxTh+wknNGaDPMEZQzhTjPohyOGFruVllWsBhVZdyGIB5NS2LAiFyAb4ndBVWd9UV71F5BYBqUkHW0FF6jik0wPdD4XzTc2vI0kUV41Ahmb4uPAi/pRg3Swcb8SnfPQUuuff6QpXtL1/nD2GOdCcdkWx8HiGnfC0yWrybSTCHcQRGIjLm4tBva6eoI0UzJBsdDBdXZmCmYHIW4Gy8nydRV+qEWpXIuuUkEqdcyUKRN7MA6qI67zCiWI8Bp7SwU1ThPHvhSD4robLb6NackKXSu2/oLBmQG2xHHFRLshNPKh0PbnI7cPe5XZhzl5R1nA/56qEjMXu/LBt3xcXDZVWH7/FWwBKSDaTX2QtBdsUh4ykdW86bIPTZEEgUOyTpYBGJcVccYM4BPAV+f4vB0xR0IbRhlMnHV53iRgZ/lpCUDAsstXRzZ5QQVo7bL2/q8v7+3784rEXox6swsW+Po/zb4PEpXLchtgal2X7yhlFz16WhQStu+SxmG/qdYocUXqFmeOsB6unPZ0L2I3SCA00Sxnn3uDNUp+6ulHPulPHj61Kn8OmckQrc0TBqPrAa6sZfdcjB+LFJt5Xv4/8WFeQhFx2iPRPXYiqqVMlf1QFrSdClZL7bAk/2n3hwJIQ9yBBSCqVTbpwpwnIDYw83nJarFS+yJBgfbByRCMjCP1eqb/ZqrCMtYSsJLjkG+3UANO0uPZTDT5+eE/DM6rf+KcZV9w0Ts69w6QSXspCcJZCOxtuLOvFMxDz6KJwtjBo+NwY1EVbx/zu941W2i3WnhTWsn0hYwS2CyVtPs3MXxYTfCixv/I3W9q6KYPAHFmtUHLTpScAg1ZlEKnfQ0jHoqQBib6r8QFJIe1ogmOYITjjI1h5Uwvov7r+7Sin5QMyCluiYd/MEy5xjFrOVN2V7QEYLLvIIfmPiysoxcQTNMP2RJmeqseIHtTMjdbgzN9AAAX+cybBSbEvt/++2Sp/Sz91CJPXC4x4lcXuzSI+o2IxPxBCyTmw=",
      "ecdh": "d+exjgw12tl6Ctl5eG6Y+asPDoh9tKZfklinmBZUPgU=",
      "eddsa": "72UWGZVLYXMbMB8qt6oee1bMBJwwHn84cv4ioX9MSvX8",
      "es256": "SobDrbiNRgeiJ/MWO3P2j69BL5k0aerjFm7cyZKZW4M=",
      "ethereum": "d3aa8bd1a842cb8f481189bf8946934b57452e7f6293fe8521252053a320c821",
      "issuer": {
        "x": "C5vTAjjVUlJ+R3MT+ZAgU1iJOSk8TG6JYkLSaEuTDZU=",
        "y": "Fi7GFDk9cOld01g/k28CO97mT9Rys9adMJBI4UNNwhQ="
      },
      "reflow": "EkjMQs8SB5rfGGhUBMEHjOVNsDHoLs8EdZSlvtHCpoY="
    }
  },
  "relying_party_well-known_path": "public/relying_party/.well-known/openid-relying-party",
  "exp": 1743692087,
  "yes_response": "yes",
  "well-known_path": "/.well-known/openid-credential-issuer",
  "did": "https://did.dyne.org/dids/",
  "keys_0": {},
  "data_0": {},
  "keys_2": {},
  "data_2": {},
  "r_credential_issuer_did_path": "result.credential_issuer_did",
  "credential_issuer_path": "credential_issuer",
  "body_path": "body",
  "did_path": "did",
	"f": "f",
	"a": "a",
	"firebase_url": "http://localhost:3366/verify-credential",
  "zen_0": "Given nothing\nThen print the string 'yes'\n",
  "zen_1": "Given I have a 'string array' in path 'result.jwks.keys'\nGiven I have a 'string' named 'given_alg'\nGiven I have a 'string' named 'did'\n\nForeach 'jwk' in 'keys'\n    When I pickup from path 'jwk.alg'\n    If I verify 'alg' is equal to 'given_alg'\n        When I copy 'kid' from 'jwk' to 'kid'\n    EndIf\nEndForeach\n\nWhen I append the 'kid' to 'did'\n\nThen print the 'did'\n",
  "zen_2": "Scenario 'w3c': get public key from did document\n\nGiven I have a 'string dictionary' in path 'result.didDocument'\n\nWhen I create 'es256' public key from did document 'didDocument'\n\nWhen I create the 'string dictionary' named 'credential_issuer'\nWhen I move the 'es256 public key' in 'credential_issuer'\n\nThen print the 'credential_issuer' as 'base64'\n",
  "zen_3": "Scenario 'sd_jwt': verify presentation\nScenario 'w3c': create jws proof\nScenario 'es256' : verify SD-JWT signature\n\nGiven I have a 'keyring'\nGiven I have a 'time' named 'exp'\n\nGiven I have a 'string dictionary' named 'body'\nGiven I have a 'string' named 'id'\nGiven I have a 'signed selective disclosure' named 'vp'\n\nGiven I have a 'es256 public key' from 'credential_issuer'\n\nGiven I have a 'string dictionary' named 'relying_party_well-known'\nGiven I have a 'string' named 'relying_party' in 'relying_party_well-known'\n\n#verify the verifiable presentation and create 'result' the array of disclosed claims\nWhen I create the 'string array' named 'result'\n\nIf I verify signed selective disclosure 'vp' issued by 'credential_issuer' is valid\n    When I pickup from path 'vp.disclosures'\n    Foreach 'dis_array' in 'disclosures'\n        When I create the copy of element '2' from array 'dis_array'\n        When I move the 'copy' in 'result'\n    EndForeach\nEndIf\n\n## 1. Create response\n\nWhen I create the 'string dictionary' named 'response'\nWhen I move the 'result' in 'response'\nWhen I move the 'id' in 'response'\nWhen I create the timestamp\nWhen I move 'timestamp' to 'iat' in 'response'\nWhen I move 'exp' in 'response'\nWhen I move 'relying_party' to 'iss' in 'response'\n\n## end 1.\n\n## 2. create proof-header\n\nWhen I create the 'string dictionary' named 'proof-header'\nWhen I set 'alg' to 'ES256' as 'string'\nWhen I set 'typ' to 'open4vci-proof+jwt' as 'string'\n\nWhen I pickup from path 'relying_party_well-known.jwks.keys'\nWhen I create the copy of element '1' from array 'keys'\nWhen I move 'copy' to 'jwk' in 'proof-header'\n\nWhen I move 'alg' in 'proof-header'\nWhen I move 'typ' in 'proof-header'\n\n## end 2,\n\n# 3. create jws from proof-header and response\n\nWhen I create the jws signature of header 'proof-header' and payload 'response'\nWhen I rename the 'jws signature' to 'message'\n\n## end 3.\n\nWhen I move the 'message' in 'body'\n\nThen print the 'body'\n"
}
