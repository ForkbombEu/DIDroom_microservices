{
    "secrets_path": "verifier/secrets.keys",
    "controller_path": "controller",
    "did_path": "did",
    "precondition_slang": "Given I have a 'time' named 'timestamp'\nGiven I have a 'string' named 'precondition_keys_path'\nGiven I have a 'string' named 'executed'\n# timestamp\nWhen I set '5 min' to '300' as 'time'\nWhen I create the result of 'timestamp' + '5 min'\nWhen I remove 'timestamp'\nWhen I create the timestamp\nWhen I verify number 'timestamp' is less than 'result'\n# executed\nWhen I set 'false' to 'false' as 'string'\nWhen I verify 'executed' is equal to 'false'\nWhen I remove 'executed'\nWhen I set 'executed' to 'true' as 'string'\nWhen I create the 'string dictionary' named 'precondition_data'\nWhen I move 'timestamp' in 'precondition_data'\nWhen I move 'precondition_keys_path' in 'precondition_data'\nWhen I move 'executed' in 'precondition_data'\nThen print the string 'OK'\nThen print the 'precondition_data'\nThen I send path 'precondition_keys_path' and send content 'precondition_data' and store in file",
    "response_slang_ldp_vc": "Scenario 'w3c': pk from did\n# Validate:\n# 1. form\n# 2. match the nonce\n# 3. match the type_values\n# 4. requested claims are present\n# 5. holder binding\n# 6. integrity and authenticity of the Credential\n# SERIALIZATION\n# prepare vp\nPrepare 'vp_id': manipulate and get with object 'dcql_query', path 'vp_id_path'\nPrepare 'vp_array': manipulate and get with object 'vp_token', path 'vp_id'\nPrepare 'vp': manipulate and get with object 'vp_array', path 'vp_path'\nPrepare 'vp_without_proof': manipulate and omit with object 'vp', paths 'proof_path'\nPrepare 'vp_proof': manipulate and get with object 'vp', path 'proof_path'\nPrepare 'vp_context': manipulate and get with object 'vp', path 'context_path'\nPrepare: manipulate and set with object 'vp_proof', path 'context_path', value 'vp_context'\nPrepare 'vp_proof_without_proofValue': manipulate and omit with object 'vp_proof', paths 'proofValue_path'\n# vp serialize body\nPrepare: manipulate and set with object 'vp_serialize_body', path 'document_path', value 'vp_without_proof'\nPrepare: manipulate and set with object 'vp_serialize_body', path 'proof_config_path', value 'vp_proof_without_proofValue'\nPrepare 'vp_serialize_body_clean': manipulate and omit with object 'vp_serialize_body', paths 'is_dict_path'\nPrepare 'serialized_vp': connect to 'serialize_api' and do post with object 'vp_serialize_body_clean'\n# resolve vp verificationMethod\nPrepare 'vp_zen_res': execute zencode with script 'did_zen', data 'vp_proof', keys 'empty_keys'\nPrepare 'vp_verificationMethod': manipulate and get with object 'vp_zen_res', path 'verificationMethod_path'\nPrepare 'vp_did': connect to 'vp_verificationMethod' and do get\n# prepare vc\nPrepare 'vc': manipulate and get with object 'vp', path 'verifiableCredential_path'\nPrepare 'vc_without_proof': manipulate and omit with object 'vc', paths 'proof_path'\nPrepare 'vc_proof': manipulate and get with object 'vc', path 'proof_path'\nPrepare 'vc_context': manipulate and get with object 'vc', path 'context_path'\nPrepare: manipulate and set with object 'vc_proof', path 'context_path', value 'vc_context'\nPrepare 'vc_proof_without_proofValue': manipulate and omit with object 'vc_proof', paths 'proofValue_path'\n# vc serialize body\nPrepare: manipulate and set with object 'vc_serialize_body', path 'document_path', value 'vc_without_proof'\nPrepare: manipulate and set with object 'vc_serialize_body', path 'proof_config_path', value 'vc_proof_without_proofValue'\nPrepare 'vc_serialize_body_clean': manipulate and omit with object 'vc_serialize_body', paths 'is_dict_path'\nPrepare 'serialized_vc': connect to 'serialize_api' and do post with object 'vc_serialize_body_clean'\n# resolve vc verificationMethod\nPrepare 'vc_zen_res': execute zencode with script 'did_zen', data 'vc_proof', keys 'empty_keys'\nPrepare 'vc_verificationMethod': manipulate and get with object 'vc_zen_res', path 'verificationMethod_path'\nPrepare 'vc_did': connect to 'vc_verificationMethod' and do get\n# from slangroom\nGiven I have a 'base64' in path 'serialized_vp.result.serialization'\nGiven I rename 'serialization' to 'vp_serialization'\nGiven I have a 'base58' part of path 'vp_proof.proofValue' after string prefix 'z'\nGiven I rename 'proofValue' to 'vp_proofValue'\nGiven I have a 'string dictionary' in path 'vp_did.result'\nGiven I rename 'result' to 'vp_did'\nGiven I have a 'base64' in path 'serialized_vc.result.serialization'\nGiven I rename 'serialization' to 'vc_serialization'\nGiven I have a 'base58' part of path 'vc_proof.proofValue' after string prefix 'z'\nGiven I rename 'proofValue' to 'vc_proofValue'\nGiven I have a 'string dictionary' in path 'vc_did.result'\nGiven I rename 'result' to 'vc_did'\n# data\nGiven I have a 'string dictionary' named 'vp_token'\n# keys\nGiven I have a 'string dictionary' named 'dcql_query'\nGiven I have a 'string' named 'nonce'\nGiven I have a 'string' named 'transaction_id'\n# pickup requested information\nWhen I pickup from path 'dcql_query.credentials.1.format'\nWhen I pickup from path 'dcql_query.credentials.1.id'\nWhen I pickup from path 'dcql_query.credentials.1.meta.type_values'\nWhen I pickup from path 'dcql_query.credentials.1.claims'\n# for the moment support only ldp_vc verification\nWhen I set 'ldp_vc' to 'ldp_vc' as 'string'\nWhen I verify 'ldp_vc' is equal to 'format'\n# pickup from presentation (vp_token[id][1])\nWhen I verify 'id' is found in 'vp_token'\nWhen I copy 'id' from 'vp_token' to 'vp_array'\nWhen I copy '1' from 'vp_array' to 'verifiablePresentation'\nWhen I pickup from path 'verifiablePresentation.proof.challenge'\nWhen I pickup from path 'verifiablePresentation.proof.cryptosuite'\nWhen I rename 'cryptosuite' to 'vp_cryptosuite'\nWhen I pickup from path 'verifiablePresentation.proof.verificationMethod'\nWhen I rename 'verificationMethod' to 'vp_verificationMethod'\nWhen I pickup from path 'verifiablePresentation.verifiableCredential.1'\nWhen I rename '1' to 'VC'\nWhen I pickup from path 'VC.type'\n# 2. match the nonce used\nWhen I verify 'challenge' is equal to 'nonce'\n# 3. match type with type_values\nWhen I set 'VerifiableCredential' to 'VerifiableCredential' as 'string'\nWhen I remove 'VerifiableCredential' from 'type'\nWhen I set 'type_matched' to 'false' as 'string'\nForeach 'type_array' in 'type_values'\nIf I verify 'type' is equal to 'type_array'\nWhen I remove 'type_matched'\nWhen I set 'type_matched' to 'true' as 'string'\nWhen I exit the foreach\nEndIf\nEndForeach\nWhen I set 'true' to 'true' as 'string'\nWhen I verify 'type_matched' is equal to 'true'\n# 4. verify all requested claims are found\nWhen I create the 'string array' named 'transaction_result'\nForeach 'c' in 'claims'\nWhen I copy 'path' from 'c' to 'path_array'\nWhen I copy 'VC' to 'root'\nForeach 'p' in 'path_array'\nWhen I copy 'p' from 'root' to 'tmp'\nWhen I remove 'root'\nWhen I rename 'tmp' to 'root'\nEndForeach\nWhen I create the 'string dictionary' named 'tmp_transaction'\nWhen I copy 'path_array' to 'path' in 'tmp_transaction'\nWhen I copy 'root' to 'value' in 'tmp_transaction'\nWhen I move 'tmp_transaction' in 'transaction_result'\nWhen I remove 'root'\nWhen I remove 'path_array'\nEndForeach\n# some helpers for later\nWhen I set 'ecdsa-rdfc-2019' to 'ecdsa-rdfc-2019' as 'string'\nWhen I set 'eddsa-rdfc-2022' to 'eddsa-rdfc-2022' as 'string'\nWhen I set 'mldsa-rdfc-2025' to 'mldsa-rdfc-2025' as 'string'\n# 5. verify vp data integrity (aka holder binding)\nIf I verify 'vp_cryptosuite' is equal to 'ecdsa-rdfc-2019'\nWhen I create the 'es256' public key from did document 'vp_did'\nWhen I verify 'vp_serialization' has a es256 signature in 'vp_proofValue' by 'es256 public key'\nWhen I remove 'es256 public key'\nWhen I set 'vp_verified' to 'true' as 'string'\nEndIf\nIf I verify 'vp_cryptosuite' is equal to 'eddsa-rdfc-2022'\nWhen I create the 'eddsa' public key from did document 'vp_did'\nWhen I verify 'vp_serialization' has a eddsa signature in 'vp_proofValue' by 'eddsa public key'\nWhen I remove 'eddsa public key'\nWhen I set 'vp_verified' to 'true' as 'string'\nEndIf\nIf I verify 'vp_cryptosuite' is equal to 'mldsa-rdfc-2025'\nWhen I create the 'mldsa44' public key from did document 'vp_did'\nWhen I verify 'vp_serialization' has a mldsa44 signature in 'vp_proofValue' by 'mldsa44 public key'\nWhen I remove 'mldsa44 public key'\nWhen I set 'vp_verified' to 'true' as 'string'\nEndIf\nWhen I verify 'vp_verified' is found\n# 6. verify vc data integrity\nWhen I pickup from path 'VC.proof.cryptosuite'\nWhen I rename 'cryptosuite' to 'vc_cryptosuite'\nIf I verify 'vc_cryptosuite' is equal to 'ecdsa-rdfc-2019'\nWhen I create the 'es256' public key from did document 'vc_did'\nWhen I verify 'vc_serialization' has a es256 signature in 'vc_proofValue' by 'es256 public key'\nWhen I set 'vc_verified' to 'true'  as 'string'\nEndIf\nIf I verify 'vc_cryptosuite' is equal to 'eddsa-rdfc-2022'\nWhen I create the 'eddsa' public key from did document 'vc_did'\nWhen I verify 'vc_serialization' has a eddsa signature in 'vc_proofValue' by 'eddsa public key'\nWhen I set 'vc_verified' to 'true'  as 'string'\nEndIf\nIf I verify 'vc_cryptosuite' is equal to 'mldsa-rdfc-2025'\nWhen I create the 'mldsa44' public key from did document 'vc_did'\nWhen I verify 'vc_serialization' has a mldsa44 signature in 'vc_proofValue' by 'mldsa44 public key'\nWhen I set 'vc_verified' to 'true'  as 'string'\nEndIf\nWhen I verify 'vc_verified' is found\n# transaction_id\nWhen I prepend string 'public/verifier/' to 'transaction_id'\nWhen I rename 'transaction_id' to 'complete_transaction_id'\nThen print the string 'OK'\nThen print the 'transaction_result'\nThen print the 'complete_transaction_id'\nCompute: store in file with content 'transaction_result', path 'complete_transaction_id'",
    "response_slang_dc+sd-jwt": "Scenario 'sd_jwt': sd-jwt_kb\nScenario 'did': did document\nScenario 'jws': verification of kb\n# Validate:\n# 1. form\n# 2. match the nonce\n# 3. match the type_values\n# 4. requested claims are present\n# 5. holder binding\n# 6. integrity and authenticity of the Credential\n# resolve holder pk\nPrepare 'credential': manipulate and get where object is 'dcql_query', path is 'credential_path'\nPrepare 'did_and_iss': execute zencode where script is 'did_and_iss_script', keys is 'credential', data is 'vp_token'\nPrepare 'holder_did': manipulate and get where object is 'did_and_iss', path is 'did_path'\nPrepare 'holder_did_document': resolve the did where did is 'holder_did'\n# resolve issuer pk\nPrepare 'iss_url': manipulate and get where object is 'did_and_iss', path is 'iss_path'\nPrepare 'iss_wk': connect to 'iss_url' and do get\nPrepare 'iss_did': manipulate and get where object is 'iss_wk', path is 'kid_path'\nPrepare 'issuer_did_document': resolve the did where did is 'iss_did'\n# extract vp\nPrepare 'id': manipulate and get where object is 'credential', path is 'id_path'\nPrepare 'vp array': manipulate and get where object is 'vp_token', path is 'id'\n# slangroom\nGiven I have a 'did document' in path 'issuer_did_document.didDocument'\nGiven I rename 'didDocument' to 'issuer_did_document'\nGiven I have a 'did document' in path 'holder_did_document.didDocument'\nGiven I rename 'didDocument' to 'holder_did_document'\n# data\nGiven I have a 'signed selective disclosure with key binding array' named 'vp_array'\nGiven I rename 'vp array' to 'sd-jwt+kb array'\nGiven I have a 'string array' named 'vp_array'\n# keys\nGiven I have a 'string dictionary' named 'dcql_query'\nGiven I have a 'string' named 'nonce'\nGiven I rename 'nonce' to 'verify nonce'\nGiven I have a 'string' named 'transaction_id'\n# pickup requested information\nWhen I pickup from path 'dcql_query.credentials.1.format'\nWhen I pickup from path 'dcql_query.credentials.1.id'\nWhen I pickup from path 'dcql_query.credentials.1.meta.vct_values'\nWhen I pickup from path 'dcql_query.credentials.1.claims'\n# pickup dc+sd-jwt as string\nWhen I copy '1' from 'vp_array' to 'dc+sd-jwt_kb_as_string'\nWhen I set '~' to '~' as 'string'\nWhen I create the array by splitting 'dc+sd-jwt_kb_as_string' at '~'\nWhen I create the size of 'array'\nWhen I write string '' in 'dc+sd-jwt_as_string'\nWhen I set 'i' to '1' as 'number'\nWhen I set '1' to '1' as 'number'\nForeach 'a' in 'array'\nIf I verify 'i' is equal to 'size'\nWhen I remove 'i'\nWhen I remove 'size'\nWhen I copy 'a' to 'kb_as_string'\nWhen I exit the foreach\nEndIf\nWhen I append 'a' to 'dc+sd-jwt_as_string'\nWhen I append the string '~' to 'dc+sd-jwt_as_string'\nWhen I create the result of 'i' + '1'\nWhen I remove 'i'\nWhen I rename 'result' to 'i'\nEndforeach\n# support only dc+sd-jwt verification\nWhen I set 'dc+sd-jwt' to 'dc+sd-jwt' as 'string'\nWhen I verify 'dc+sd-jwt' is equal to 'format'\n# pickup from presentation (vp_token[id][1])\nWhen I copy '1' from 'sd-jwt+kb array' to 'sd-jwt+kb'\nWhen I pickup a 'string dictionary' from path 'sd-jwt+kb.jwt.header'\nWhen I rename 'header' to 'sd-jwt_header'\nWhen I pickup a 'string dictionary' from path 'sd-jwt+kb.jwt.payload'\nWhen I rename 'payload' to 'sd-jwt_payload'\nWhen I pickup a 'string array' from path 'sd-jwt+kb.disclosures'\nWhen I rename 'disclosures' to 'sd-jwt_disclosures'\nWhen I pickup a 'string dictionary' from path 'sd-jwt+kb.key_binding.header'\nWhen I rename 'header' to 'kb_header'\nWhen I pickup a 'string dictionary' from path 'sd-jwt+kb.key_binding.payload'\nWhen I rename 'payload' to 'kb_payload'\n# 2. match the nonce used\nWhen I pickup from path 'kb_payload.nonce'\nWhen I verify 'nonce' is equal to 'verify nonce'\n# 3. match type/vct with vct_values\nIf I verify 'vct' is found in 'sd-jwt_payload'\nWhen I copy 'vct' from 'sd-jwt_payload' to 'cred_vct'\nEndIf\n# TODO: is this still supported??????\nIf I verify 'type' is found in 'sd-jwt_payload'\nWhen I copy 'type' from 'sd-jwt_payload' to 'cred_vct'\nEndIf\nWhen I copy '1' from 'vct_values' to 'verify vct'\nWhen I verify 'cred_vct' is equal to 'verify vct'\n# 4. verify all requested claims are found\nWhen I create the 'string array' named 'transaction_result'\nForeach 'c' in 'claims'\nWhen I copy 'path' from 'c' to 'path_array'\nWhen I copy '1' from 'path_array' to 'claim_identifier'\nForeach 'd' in 'sd-jwt_disclosures'\nWhen I copy '2' from 'd' to 'disclosure_identifier'\nIf I verify 'disclosure_identifier' is equal to 'claim_identifier'\nWhen I copy 'd' to 'matching_disclosure'\nWhen I remove 'disclosure_identifier'\nWhen I exit the foreach\nEndIf\nWhen I remove 'disclosure_identifier'\nEndForeach\nWhen I verify 'matching_disclosure' is found\nWhen I create the 'string dictionary' named 'tmp_transaction'\nWhen I copy 'path_array' to 'path' in 'tmp_transaction'\nIf I verify size of 'path_array' is more than '1'\nWhen I copy 'path_array' to 'tmp_path_array'\nWhen I remove 'claim_identifier' from 'tmp_path_array'\nWhen I copy '3' from 'matching_disclosure' to 'disclosure_value'\nWhen I rename 'disclosure_value' to 'root'\nForeach 'p' in 'tmp_path_array'\nWhen I copy 'p' from 'root' to 'tmp'\nWhen I remove 'root'\nWhen I rename 'tmp' to 'root'\nEndForeach\nWhen I copy 'root' to 'value' in 'tmp_transaction'\nWhen I remove 'root'\nWhen I remove 'tmp_path_array'\nEndIf\nIf I verify size of 'path_array' is less or equal than '1'\nWhen I copy '3' from 'matching_disclosure' to 'value'\nWhen I move 'value' in 'tmp_transaction'\nEndIf\nWhen I move 'tmp_transaction' in 'transaction_result'\nWhen I remove 'path_array'\nWhen I remove 'claim_identifier'\nWhen I remove 'matching_disclosure'\nEndForeach\n# some helpers for later\nWhen I set 'ecdsa-rdfc-2019' to 'ecdsa-rdfc-2019' as 'string'\nWhen I set 'eddsa-rdfc-2022' to 'eddsa-rdfc-2022' as 'string'\nWhen I set 'mldsa-rdfc-2025' to 'mldsa-rdfc-2025' as 'string'\n# 5. verify key binding (aka holder binding)\n# typ\nWhen I pickup from path 'kb_header.typ'\nWhen I set 'kb+jwt' to 'kb+jwt' as 'string'\nWhen I verify 'typ' is equal to 'kb+jwt'\n# hash\nWhen I pickup from path 'kb_payload.sd_hash'\nWhen I create the hash of 'dc+sd-jwt_as_string'\nWhen I move 'hash' as 'hex' to 'hex_hash'\nWhen I verify 'hex_hash' is equal to 'sd_hash'\n# signature\nWhen I create the 'es256' public key from did document 'holder_did_document'\nWhen I verify jws signature in 'kb_as_string'\nWhen I remove 'es256 public key'\n# 6. verify sd-jwt\nWhen I create the 'es256' public key from did document 'issuer_did_document'\nWhen I verify the signed selective disclosure 'sd-jwt+kb' issued by 'es256 public key' is valid\n# transaction_id\nWhen I prepend string 'public/verifier/' to 'transaction_id'\nWhen I rename 'transaction_id' to 'complete_transaction_id'\nThen print the string 'OK'\nThen print the 'transaction_result'\nThen print the 'complete_transaction_id'\nCompute: store in file with content 'transaction_result', path 'complete_transaction_id'",
    "response_keys_ldp_vc": {
        "serialize_api": "https://rdfcanon.forkbomb.eu/serialize",
        "vp_id_path": "credentials[0].id",
        "vp_path": "[0]",
        "proof_path": "proof",
        "context_path": "@context",
        "proofValue_path": "proofValue",
        "is_dict_path": "is_dict",
        "vp_serialize_body": {
          "is_dict": "true"
        },
        "document_path": "document",
        "proof_config_path": "proof_config",
        "verifiableCredential_path": "verifiableCredential[0]",
        "vc_serialize_body": {
          "is_dict": "true"
        },
        "did_zen": "Given I have a 'string' named 'verificationMethod'\nWhen I prepend string 'https://dev.uniresolver.io/1.0/identifiers/' to 'verificationMethod'\nThen print the 'verificationMethod'",
        "empty_keys": {},
        "verificationMethod_path": "verificationMethod"
    },
    "response_keys_dc+sd-jwt": {
        "credential_path": "credentials.0",
        "iss_path": "iss",
        "kid_path": "result.jwks.keys.0.kid",
        "did_path": "did",
        "id_path": "id",
        "did_and_iss_script": "Scenario 'sd_jwt': dc+sd-jwt_kb\nGiven I have a 'string' named 'id'\nGiven I have a 'signed selective disclosure with key binding array' named by 'id'\nWhen I rename object named by 'id' to 'dc+sd-jwt_kb_array'\nWhen I copy '1' from 'dc+sd-jwt_kb_array' to 'dc+sd-jwt_kb'\nWhen I pickup a 'string' from path 'dc+sd-jwt_kb.jwt.payload.sub'\nWhen I rename 'sub' to 'did'\nWhen I pickup a 'string' from path 'dc+sd-jwt_kb.jwt.payload.iss'\nWhen I append the string '/.well-known/openid-credential-issuer' to 'iss'\nThen print the 'did'\nThen print the 'iss'"
    },
    "response_schema": {
        "type": "object",
        "properties": {
            "vp_token": {
                "type": "object"
            }
        }
    }
}
