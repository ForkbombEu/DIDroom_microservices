Scenario 'w3c': pk from did

# Validate:
# 1. form
# 2. match the nonce
# 3. match the type_values
# 4. requested claims are present
# 5. holder binding
# 6. integrity and authenticity of the Credential

# SERIALIZATION
# prepare vp
Prepare 'vp_id': manipulate and get with object 'dcql_query', path 'vp_id_path'
Prepare 'vp_array': manipulate and get with object 'vp_token', path 'vp_id'
Prepare 'vp': manipulate and get with object 'vp_array', path 'vp_path'
Prepare 'vp_without_proof': manipulate and omit with object 'vp', paths 'proof_path'
Prepare 'vp_proof': manipulate and get with object 'vp', path 'proof_path'
Prepare 'vp_context': manipulate and get with object 'vp', path 'context_path'
Prepare: manipulate and set with object 'vp_proof', path 'context_path', value 'vp_context'
Prepare 'vp_proof_without_proofValue': manipulate and omit with object 'vp_proof', paths 'proofValue_path'
# vp serialize body
Prepare: manipulate and set with object 'vp_serialize_body', path 'document_path', value 'vp_without_proof'
Prepare: manipulate and set with object 'vp_serialize_body', path 'proof_config_path', value 'vp_proof_without_proofValue'
Prepare 'vp_serialize_body_clean': manipulate and omit with object 'vp_serialize_body', paths 'is_dict_path'
Prepare 'serialized_vp': connect to 'serialize_api' and do post with object 'vp_serialize_body_clean'

# resolve vp verificationMethod
Prepare 'vp_zen_res': execute zencode with script 'did_zen', data 'vp_proof', keys 'empty_keys'
Prepare 'vp_verificationMethod': manipulate and get with object 'vp_zen_res', path 'verificationMethod_path'
Prepare 'vp_did': connect to 'vp_verificationMethod' and do get

# prepare vc
Prepare 'vc': manipulate and get with object 'vp', path 'verifiableCredential_path'
Prepare 'vc_without_proof': manipulate and omit with object 'vc', paths 'proof_path'
Prepare 'vc_proof': manipulate and get with object 'vc', path 'proof_path'
Prepare 'vc_context': manipulate and get with object 'vc', path 'context_path'
Prepare: manipulate and set with object 'vc_proof', path 'context_path', value 'vc_context'
Prepare 'vc_proof_without_proofValue': manipulate and omit with object 'vc_proof', paths 'proofValue_path'
# vc serialize body
Prepare: manipulate and set with object 'vc_serialize_body', path 'document_path', value 'vc_without_proof'
Prepare: manipulate and set with object 'vc_serialize_body', path 'proof_config_path', value 'vc_proof_without_proofValue'
Prepare 'vc_serialize_body_clean': manipulate and omit with object 'vc_serialize_body', paths 'is_dict_path'
Prepare 'serialized_vc': connect to 'serialize_api' and do post with object 'vc_serialize_body_clean'

# resolve vc verificationMethod
Prepare 'vc_zen_res': execute zencode with script 'did_zen', data 'vc_proof', keys 'empty_keys'
Prepare 'vc_verificationMethod': manipulate and get with object 'vc_zen_res', path 'verificationMethod_path'
Prepare 'vc_did': connect to 'vc_verificationMethod' and do get

# from slangroom
Given I have a 'base64' in path 'serialized_vp.result.serialization'
Given I rename 'serialization' to 'vp_serialization'
Given I have a 'base58' part of path 'vp_proof.proofValue' after string prefix 'z'
Given I rename 'proofValue' to 'vp_proofValue'
Given I have a 'string dictionary' in path 'vp_did.result'
Given I rename 'result' to 'vp_did'
Given I have a 'base64' in path 'serialized_vc.result.serialization'
Given I rename 'serialization' to 'vc_serialization'
Given I have a 'base58' part of path 'vc_proof.proofValue' after string prefix 'z'
Given I rename 'proofValue' to 'vc_proofValue'
Given I have a 'string dictionary' in path 'vc_did.result'
Given I rename 'result' to 'vc_did'

# data
Given I have a 'string dictionary' named 'vp_token'

# keys
Given I have a 'string dictionary' named 'dcql_query'
Given I have a 'string' named 'nonce'
Given I have a 'string' named 'transaction_id'
Given I have a 'string' named 'complete_transaction_id'

# pickup requested information
When I pickup from path 'dcql_query.credentials.1.format'
When I pickup from path 'dcql_query.credentials.1.id'
When I pickup from path 'dcql_query.credentials.1.meta.type_values'
When I pickup from path 'dcql_query.credentials.1.claims'

# for the moment support only ldp_vc verification
When I set 'ldp_vc' to 'ldp_vc' as 'string'
When I verify 'ldp_vc' is equal to 'format'

# pickup from presentation (vp_token[id][1])
When I verify 'id' is found in 'vp_token'
When I copy 'id' from 'vp_token' to 'vp_array'
When I copy '1' from 'vp_array' to 'verifiablePresentation'
When I pickup from path 'verifiablePresentation.proof.challenge'
When I pickup from path 'verifiablePresentation.proof.cryptosuite'
When I rename 'cryptosuite' to 'vp_cryptosuite'
When I pickup from path 'verifiablePresentation.proof.verificationMethod'
When I rename 'verificationMethod' to 'vp_verificationMethod'
When I pickup from path 'verifiablePresentation.verifiableCredential.1'
When I rename '1' to 'VC'
When I pickup from path 'VC.type'

# 2. match the nonce used
When I verify 'challenge' is equal to 'nonce'

# 3. match type with type_values
When I set 'VerifiableCredential' to 'VerifiableCredential' as 'string'
When I remove 'VerifiableCredential' from 'type'
When I set 'type_matched' to 'false' as 'string'
Foreach 'type_array' in 'type_values'
If I verify 'type' is equal to 'type_array'
When I remove 'type_matched'
When I set 'type_matched' to 'true' as 'string'
When I exit the foreach
EndIf
EndForeach
When I set 'true' to 'true' as 'string'
When I verify 'type_matched' is equal to 'true'

# 4. verify all requested claims are found
When I create the 'string array' named 'transaction_result'
Foreach 'c' in 'claims'
    When I copy 'path' from 'c' to 'path_array'
    When I copy 'VC' to 'root'
    Foreach 'p' in 'path_array'
        When I copy 'p' from 'root' to 'tmp'
        When I remove 'root'
        When I rename 'tmp' to 'root'
    EndForeach
    When I move 'root' to 'value'
    If I verify 'values' is found in 'c'
        When I copy 'values' from 'c' to 'values_array'
        When I verify 'value' is found in 'values_array'
        When I remove 'values_array'
    EndIf
    When I create the 'string dictionary' named 'tmp_transaction'
    When I move 'path_array' to 'path' in 'tmp_transaction'
    When I move 'value' in 'tmp_transaction'
    When I move 'tmp_transaction' in 'transaction_result'
EndForeach

# some helpers for later
When I set 'ecdsa-rdfc-2019' to 'ecdsa-rdfc-2019' as 'string'
When I set 'eddsa-rdfc-2022' to 'eddsa-rdfc-2022' as 'string'
When I set 'mldsa-rdfc-2025' to 'mldsa-rdfc-2025' as 'string'

# 5. verify vp data integrity (aka holder binding)
If I verify 'vp_cryptosuite' is equal to 'ecdsa-rdfc-2019'
When I create the 'es256' public key from did document 'vp_did'
When I verify 'vp_serialization' has a es256 signature in 'vp_proofValue' by 'es256 public key'
When I remove 'es256 public key'
When I set 'vp_verified' to 'true' as 'string'
EndIf
If I verify 'vp_cryptosuite' is equal to 'eddsa-rdfc-2022'
When I create the 'eddsa' public key from did document 'vp_did'
When I verify 'vp_serialization' has a eddsa signature in 'vp_proofValue' by 'eddsa public key'
When I remove 'eddsa public key'
When I set 'vp_verified' to 'true' as 'string'
EndIf
If I verify 'vp_cryptosuite' is equal to 'mldsa-rdfc-2025'
When I create the 'mldsa44' public key from did document 'vp_did'
When I verify 'vp_serialization' has a mldsa44 signature in 'vp_proofValue' by 'mldsa44 public key'
When I remove 'mldsa44 public key'
When I set 'vp_verified' to 'true' as 'string'
EndIf
When I verify 'vp_verified' is found

# 6. verify vc data integrity
When I pickup from path 'VC.proof.cryptosuite'
When I rename 'cryptosuite' to 'vc_cryptosuite'

If I verify 'vc_cryptosuite' is equal to 'ecdsa-rdfc-2019'
When I create the 'es256' public key from did document 'vc_did'
When I verify 'vc_serialization' has a es256 signature in 'vc_proofValue' by 'es256 public key'
When I set 'vc_verified' to 'true'  as 'string'
EndIf
If I verify 'vc_cryptosuite' is equal to 'eddsa-rdfc-2022'
When I create the 'eddsa' public key from did document 'vc_did'
When I verify 'vc_serialization' has a eddsa signature in 'vc_proofValue' by 'eddsa public key'
When I set 'vc_verified' to 'true'  as 'string'
EndIf
If I verify 'vc_cryptosuite' is equal to 'mldsa-rdfc-2025'
When I create the 'mldsa44' public key from did document 'vc_did'
When I verify 'vc_serialization' has a mldsa44 signature in 'vc_proofValue' by 'mldsa44 public key'
When I set 'vc_verified' to 'true'  as 'string'
EndIf
When I verify 'vc_verified' is found

Then print the 'transaction_result'
Then print the 'complete_transaction_id'
