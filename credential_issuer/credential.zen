# OpenID4VCI Credential issuer, /credential

Rule unknown ignore

# This slangroom script reads the issuer's .well-known read from /public/credential_issuer and passes it as object
Given I send path 'credential_issuer_well-known_openid-credential-issuer' and I read file content and output into 'credential_issuer_well-known'
 
# There is a statement missing that create creates the holder's claims from the access_token, the claims or now passed in keys 
 
Scenario 'w3c': verify jws
Scenario 'sd_jwt': create credential

Given I have a 'keyring' 
Given I have a 'string' named 'verificationMethod'

Given I have a 'string' named 'format'
Given I have a 'string' named 'vct'

# -
# Here we are doing some data manipulation in Given because of the structure of the 'BEARER' 
# which contains a string, then a space and then a base58 which we want to load as schema 'json web token'
# we haven't been able to fine a more elegant way to to do this 
Given I have a 'string' part of 'Authorization' after string prefix 'bearer_'
Given I rename 'Authorization' to 'Authorization_string'
Given I have a 'json web token' part of 'Authorization' after string prefix 'bearer_'
# -

Given I have a 'string dictionary' named 'proof'
Given I have a 'string' named 'jwt' in 'proof'

Given I have a 'supported_selective_disclosure' named 'credential_issuer_well-known'
Given I have a 'string array' named 'authorization_servers' inside 'credential_issuer_well-known'
Given I have a 'string dictionary' named 'holder_claims'




When I verify the jws signature in 'jwt'
When I verify the jws signature in 'Authorization_string'

When I pickup from path 'Authorization.payload'
When I pickup from path 'payload.exp'

# Here we fetch the timesttamp of the OS (using os.time) and we cast 
# both the timestamps to integer in order to compare then straight after
When I create integer 'exp_int' cast of timestamp 'exp'
When I create the timestamp
When I create integer 'timestamp_int' cast of timestamp 'timestamp'

If I verify number 'exp_int' is less than 'timestamp_int'
When I exit with error message 'Expired JSON web token authorization'
Endif


# Here we check that the authz_server in the access_token is contained in the list of authz_servers 
# present in the credential issuer's .well-known
When I pickup from path 'payload.iss'
If I verify 'iss' is not found in 'authorization_servers'
When I exit with error message 'the authorization server that created the access token is not found in the list of authorized authz server in the issuers well known'
Endif 

When I create the random 'c_nonce'
When I set 'c_nonce_expires_in' to '600' as 'number'

# here we create and sign the SD-JWT with various steps
When I create the selective disclosure request from 'credential_issuer_well-known' with id 'vct' for 'holder_claims'
When I create selective disclosure of 'selective_disclosure_request'
When I create the signed selective disclosure of 'selective disclosure'
When I rename the 'signed selective disclosure' to 'credential'



Then print the 'credential'
Then print the 'c_nonce'
Then print the 'c_nonce_expires_in'

