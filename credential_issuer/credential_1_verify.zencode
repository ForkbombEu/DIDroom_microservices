Rule unknown ignore

Scenario 'w3c': verify jws

# keyring
Prepare secret 'secrets': read file content where path is 'secrets_path'
Prepare 'controller': manipulate and get where object is 'secrets', path is 'controller_path'
Prepare secret 'personal_keyring': manipulate and get where object is 'secrets', path is 'controller'

# wk
Prepare 'credential_issuer_well-known': read file content where path is 'well-known_path'

# keyring
Given I have the 'keyring' in 'personal_keyring'

# headers
Given I have a 'string' part of path 'http_headers.request.authorization' after string prefix 'BEARER'
Given I rename 'authorization' to 'token'
Given I have a 'json web token' part of path 'http_headers.request.authorization' after string prefix 'BEARER'

# well-known.authorization_server
Given I have a 'string dictionary' named 'credential_issuer_well-known'
Given I have a 'string array' in path 'credential_issuer_well-known.authorization_servers' 

# data in input
Given I have a 'string' named 'credential_configuration_id'
and I have a 'json_web_token' named 'jwt' in 'proof'
and I rename 'jwt' to 'json_web_token_dict'
and I have a 'string' named 'jwt' in 'proof'
and I have a 'string dictionary' named 'proof'
and I have a 'string dictionary' named 'http_headers'

# verify jws
When I verify the jws signature in 'jwt'

# extract nonce to be verified
When I pickup from path 'json_web_token_dict.payload.nonce'
When I set 'nonce_path' to 'credential_issuer/nonces/' as 'string'
When I append 'nonce' to 'nonce_path'

# verify iss
When I pickup a 'string' from path 'authorization.payload.iss'
If I verify 'iss' is not found in 'authorization_servers'
When I exit with error message 'the authorization server that created the access token is not found in the list of authorized authz server in the issuers well known'
Endif

# create as_well-known_endpoint
If I verify 'iss' has suffix '/'
When I split the rightmost '1' bytes of 'iss'
Endif
When I append the string '/.well-known/oauth-authorization-server' to 'iss'
and I rename 'iss' to 'as_well-known_endpoint'

# token
and I create the 'string dictionary' named 'post_data'
When I split leftmost '1' bytes of 'token'
and I move 'token' in 'post_data'

# path to expiration file and one utility for later
When I set 'path_to_expiration' to 'credential_issuer/custom_code/' as 'string'
and I append 'credential_configuration_id' to 'path_to_expiration'
and I append the string '.time.json' to 'path_to_expiration'
and I set 'mode_path' to 'mode' as 'string'

Then print the 'credential_configuration_id'
and print the 'proof'
and print the 'as_well-known_endpoint' as 'string'
and print the 'post_data'
and print the 'keyring'
and print the 'credential_issuer_well-known'
and print the 'path_to_expiration'
and print the 'mode_path'
and print the 'nonce_path'

Compute 'result': connect to 'as_well-known_endpoint' and do get
Compute 'introspection_endpoint': manipulate and get where object is 'result', path is 'r.introspection_endpoint'
Compute 'as_well-known_endpoint': manipulate and delete
Compute 'result': manipulate and delete

Compute: verify file exists where path is 'nonce_path'
Compute 'nonce_expiry': read verbatim file content where path is 'nonce_path'
