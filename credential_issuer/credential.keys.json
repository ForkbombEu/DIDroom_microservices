{
	"keyring": {
		"bbs": "Us7qmB4mUJH1yTNWi7uMZAMBl3PBcHa2oE+zRnWr6eI=",
		"bitcoin": "L58Km6WNHNgM34DgWY8aK6PdwobYNpXRXDb7BD51fZsGFr4hbsKy",
		"dilithium": "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",
		"ecdh": "DYbt/qDFptt9FwPCdy4IzjxqoGo+DWCy6i8Rdjydht4=",
		"eddsa": "7gsi1qvroxK11JRgUPyTQAftD1ZB4Ck1kSXEPLf9BfxM",
		"es256": "Zt0k/Rn9gJmawe1dc9R/FAB0L2nkYsCMEpCtSF4kK/Y=",
		"ethereum": "8383fda76e3bee7a980753369429b8da7cb099c1c872bb4ed80010a06aa47b74",
		"issuer": {
			"x": "Lf19G5cAKpGnk5lD2eaSpOeFysZnFd9GsmbEAwccZWI=",
			"y": "Ln3dcGjXpDiSYPX5cjJGrshOBfGF5lXdHmGGY/LVOqg="
		},
		"reflow": "Lw6i4xh1APeCpEnyiiNg3M4fooI7LhrM5jf0f4cvgBQ="
	},
	"credential_issuer_well-known_openid-credential-issuer": "public/credential_issuer/.well-known/openid-credential-issuer",
	"zen_1": "Scenario 'w3c': verify jws\n\n# headers\nGiven I have a 'string' named 'authorization' in 'request'\nGiven I rename 'authorization' to 'token'\nGiven I have a 'bearer json web token' named 'authorization' in 'request'\n\n# well-known.authorization_server\nGiven I have a 'string array' named 'authorization_servers'\n\n# verify iss\nWhen I pickup a 'string' from path 'authorization.payload.iss'\nIf I verify 'iss' is not found in 'authorization_servers'\nWhen I exit with error message 'the authorization server that created the access token is not found in the list of authorized authz server in the issuers well known'\nEndif\n\n# create as_well-known_endpoint\nIf I verify 'iss' has suffix '/'\nWhen I split the rightmost '1' bytes of 'iss'\nEndif\nWhen I append the string '/.well-known/oauth-authorization-server' to 'iss'\nand I rename 'iss' to 'as_well-known_endpoint'\n\n# removing 'Bearer ' (7 chars) from the start of the string\nWhen I split leftmost '7' bytes of 'token'\n\nThen print the 'as_well-known_endpoint' as 'string'\nThen print the 'token'\n",
	"as_well-known_endpoint_path": "as_well-known_endpoint",
	"as_well-known_endpoint_path_array": ["as_well-known_endpoint_path_array"],
	"r.introspection_endpoint": "result.introspection_endpoint",
	"r.holder_claims": "result.holder_claims"
}