<!doctype html>
<html lang="en" class="text-xs md:text-lg">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <script src="https://cdn.tailwindcss.com?plugins=forms,typography"></script>
  <script src="https://cdn.jsdelivr.net/npm/cash-dom/dist/cash.min.js"></script>
  <script type="module" src="https://cdn.jsdelivr.net/npm/@slangroom/browser"></script>
  <script src="https://cdn.jsdelivr.net/npm/@json-editor/json-editor@latest/dist/jsoneditor.min.js"></script>
  <script type="module"
    src="https://cdn.jsdelivr.net/npm/@didroom/components/dist/didroom-components/didroom-components.esm.js"></script>
  <link rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/@didroom/components/dist/didroom-components/didroom-components.css" />
  <script>
    tailwind.config = {
      plugins: [
        require('@tailwindcss/typography'),
      ],
    }
  </script>
</head>

<body class="font-sans antialised flex flex-col h-full min-h-screen bg-primary p-8">
  <main class="flex-grow">
    <div class="mx-auto w-fit">
      <div class="flex items-center gap-2 text-xl font-semibold not-italic w-fit p-2">
        <d-avatar id="avatar" shape="square"></d-avatar>
        <d-heading class="font-semibold" size="xs" id="heading"></d-heading>
      </div>
      <article id="description" class="prose dark:prose-invert rounded p-2"></article>
    </div>
    <div hx-ext="response-targets">
      <form id="params">
        <div id="form"></div>
        <div class="flex w-full">
          <d-button color="accent" id="execute" expand="true" class="w-full mt-4">AUTHENTICATE</d-button>
          <div class="ml-4 h-8 w-10 animate-bounce htmx-indicator hidden">
            <div class="mx-auto h-8 w-8 animate-pulse rounded-full bg-gray-300"></div>
            <span class="absolute flex h-6 w-6 animate-spin">
              <span class="h-4 w-4 rounded-full bg-gray-300"></span>
            </span>
          </div>
        </div>
      </form>
      <pre id="response" class="overflow-auto max-h-[30rem] text-sm mb-4"></pre>
      <pre id="error" class="overflow-auto max-h-[30rem] text-black dark:text-white text-sm mb-4"></pre>
    </div>
  </main>
  <script>
    // get url
    const paramsIdx = document.URL.indexOf('?');
    const baseUrl = document.URL.substring(0, paramsIdx - "authorize".length - 1);
    const params = {};
    if (paramsIdx != -1) {
      const pairs = document.URL.substring(paramsIdx + 1, document.URL.length).split('&');
      for (const pair of pairs) {
        const nameVal = pair.split('=');
        params[nameVal[0]] = nameVal[1];
      }
    }
    // filled by make authorize
    const schemas = {}

    const highlight = (json) => {
      json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      return json.replace(
        /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,
        function (match) {
          var cls = 'number';
          if (/^"/.test(match)) {
            if (/:$/.test(match)) {
              cls = 'key';
            } else {
              cls = 'string';
            }
          } else if (/true|false/.test(match)) {
            cls = 'boolean';
          } else if (/null/.test(match)) {
            cls = 'null';
          }
          return '<span class="' + cls + '">' + match + '</span>';
        }
      );
    };

    fetch(`${baseUrl}/ru_to_toc`, {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify(params)
    })
      .then((response) => response.json())
      .then((toc) => {
        const type = toc.credential_configuration_id;
        const issuerUrl = toc.auth_details[0].locations[0];
        fetch(`${issuerUrl}/.well-known/openid-credential-issuer`)
          .then((response) => response.json())
          .then((wk) => {
            const credentialInfo = wk.credential_configurations_supported[type].display[0];
            $("#avatar").attr("name", credentialInfo?.name)
            $("#avatar").attr("alt", credentialInfo?.logo.alt_text)
            $("#avatar").attr("src", credentialInfo?.logo.uri)
            $("#heading").text(credentialInfo?.name)
            $("#description").html(marked.parse(credentialInfo?.description || ""))
            if (credentialInfo?.text_color.length > 0)
              $("#description").addClass("text-[" + credentialInfo.text_color + "]")
            if (credentialInfo?.background_color.length > 0)
              $("#description").addClass("bg-[" + credentialInfo.background_color + "]")
            const editor = new JSONEditor(document.getElementById('form'), {
              schema: schemas[type],
              compact: true,
              disable_collapse: true,
              disable_edit_json: true,
              disable_properties: true,
              required_by_default: true,
              show_errors: 'change',
              use_name_attributes: false,
              theme: 'html'
            });
            editor.on('ready', function () {
              const err = editor.validate();

              Object.values(editor.editors).forEach(editor => {
                editor.is_dirty = true // If not dirty the editor will not display errors
                editor.showValidationErrors(err) // every editor filters errors by path
              })
              document.querySelectorAll('label').forEach(label => {
                const input = label.querySelector('input[type="radio"]'); // Keep the input intact
                const textNode = label.childNodes[1]; // Get the text node (after input)

                if (textNode && textNode.nodeType === Node.TEXT_NODE) {
                  textNode.nodeValue = textNode.nodeValue.replace('\u00A0', ''); // Replace `&nbsp;` with a regular space
                }
              });
              document.querySelector('#params input').focus();
            });

            $(document).ready(() => {
              $('#execute').on('click', async (e) => {
                $('.htmx-indicator').show();
                e.preventDefault();
                $('#error').html('');
                $('#response').html('');
                try {
                  const data = editor.getValue();
                  const form = document.createElement('form');
                  form.method = 'POST';
                  form.action = `${baseUrl}/authorize_backend`;

                  const form_input_and_params = { params, data, custom_code: type };

                  const input = document.createElement('input');
                  input.type = 'hidden';
                  input.name = 'form_input_and_params';
                  input.value = JSON.stringify(form_input_and_params);
                  form.appendChild(input);
                  document.body.appendChild(form);
                  form.submit();
                } catch (e) {
                  $('#error').html(e);
                  console.error(e);
                  // window.parent.postMessage(e, '*');
                } finally {
                  $('.htmx-indicator').hide();
                }
              });
            });
          });
      });
  </script>
  <style>
    /* gantari-latin-wght-normal */
    @font-face {
      font-family: 'Gantari Variable';
      font-style: normal;
      font-display: swap;
      font-weight: 100 900;
      src: url(https://cdn.jsdelivr.net/fontsource/fonts/gantari:vf@latest/latin-wght-normal.woff2) format('woff2-variations');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }

    body {
      font-family: "Gantari Variable";
    }

    select {
      border-radius: 6px;
      width: 100%;
      border-color: black;
      border-width: 2px;
      overflow: hidden;
      word-wrap: normal;
      white-space: normal;
      font-size: 1.5rem;
    }

    div[data-theme='html'] .je-indented-panel.je-indented-panel {
      border: none;
      padding: 0px;
      margin: 0px;
    }

    input[type="radio"].je-radio {
      width: 48px !important;
      height: 48px;
      margin-right: 20px;
      flex-shrink: 0;
      border-color: black;
      border-width: 2px;
    }

    label:has(input[type="radio"].je-radio) {
      display: inline-flex;
      align-items: center;
      white-space: normal;
      line-height: 1.2;
      margin-bottom: 2px;
      margin-top: 2px;
      width: 100%;
    }

    .je-form-input-label {
      margin-left: 20px;
      margin-top: 20px;
      line-height: 1.2;
    }

    label {
      font-size: 1.5rem;
    }

    .form-control>input {
      border-color: black;
      border-width: 2px;
      font-size: 1.5rem;
    }

    .htmx-added {
      outline-color: #22c55e;
      outline-width: 8px;
      outline-style: solid;
    }

    .je-header {
      display: none;
    }

    .je-object__container {
      border: none;
    }

    .string {
      color: violet;
    }

    .number {
      color: darkorange;
    }

    .boolean {
      color: blue;
    }

    .null {
      color: magenta;
    }

    .key {
      color: red;
    }

    form#params label {
      color: var(--on);
      margin-bottom: 5px;
    }

    form#params input {
      border-radius: 6px;
      width: 100%;
    }
  </style>
</body>

</html>
